{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const u=require(\"universalify\").fromCallback;const path=require(\"path\");const fs=require(\"../fs\");const _mkdirs=require(\"../mkdirs\");const mkdirs=_mkdirs.mkdirs;const mkdirsSync=_mkdirs.mkdirsSync;const _symlinkPaths=require(\"./symlink-paths\");const symlinkPaths=_symlinkPaths.symlinkPaths;const symlinkPathsSync=_symlinkPaths.symlinkPathsSync;const _symlinkType=require(\"./symlink-type\");const symlinkType=_symlinkType.symlinkType;const symlinkTypeSync=_symlinkType.symlinkTypeSync;const pathExists=require(\"../path-exists\").pathExists;const{areIdentical}=require(\"../util/stat\");function createSymlink(srcpath,dstpath,type,callback){callback=typeof type===\"function\"?type:callback;type=typeof type===\"function\"?false:type;fs.lstat(dstpath,(err,stats)=>{if(!err&&stats.isSymbolicLink()){Promise.all([fs.stat(srcpath),fs.stat(dstpath)]).then(([srcStat,dstStat])=>{if(areIdentical(srcStat,dstStat))return callback(null);_createSymlink(srcpath,dstpath,type,callback)})}else _createSymlink(srcpath,dstpath,type,callback)})}__name(createSymlink,\"createSymlink\");function _createSymlink(srcpath,dstpath,type,callback){symlinkPaths(srcpath,dstpath,(err,relative)=>{if(err)return callback(err);srcpath=relative.toDst;symlinkType(relative.toCwd,type,(err2,type2)=>{if(err2)return callback(err2);const dir=path.dirname(dstpath);pathExists(dir,(err3,dirExists)=>{if(err3)return callback(err3);if(dirExists)return fs.symlink(srcpath,dstpath,type2,callback);mkdirs(dir,err4=>{if(err4)return callback(err4);fs.symlink(srcpath,dstpath,type2,callback)})})})})}__name(_createSymlink,\"_createSymlink\");function createSymlinkSync(srcpath,dstpath,type){let stats;try{stats=fs.lstatSync(dstpath)}catch{}if(stats&&stats.isSymbolicLink()){const srcStat=fs.statSync(srcpath);const dstStat=fs.statSync(dstpath);if(areIdentical(srcStat,dstStat))return}const relative=symlinkPathsSync(srcpath,dstpath);srcpath=relative.toDst;type=symlinkTypeSync(relative.toCwd,type);const dir=path.dirname(dstpath);const exists=fs.existsSync(dir);if(exists)return fs.symlinkSync(srcpath,dstpath,type);mkdirsSync(dir);return fs.symlinkSync(srcpath,dstpath,type)}__name(createSymlinkSync,\"createSymlinkSync\");module.exports={createSymlink:u(createSymlink),createSymlinkSync};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,EAAI,QAAQ,cAAc,EAAE,aAClC,MAAM,KAAO,QAAQ,MAAM,EAC3B,MAAM,GAAK,QAAQ,OAAO,EAC1B,MAAM,QAAU,QAAQ,WAAW,EACnC,MAAM,OAAS,QAAQ,OACvB,MAAM,WAAa,QAAQ,WAE3B,MAAM,cAAgB,QAAQ,iBAAiB,EAC/C,MAAM,aAAe,cAAc,aACnC,MAAM,iBAAmB,cAAc,iBAEvC,MAAM,aAAe,QAAQ,gBAAgB,EAC7C,MAAM,YAAc,aAAa,YACjC,MAAM,gBAAkB,aAAa,gBAErC,MAAM,WAAa,QAAQ,gBAAgB,EAAE,WAE7C,KAAM,CAAE,YAAa,EAAI,QAAQ,cAAc,EAE/C,SAAS,cAAe,QAAS,QAAS,KAAM,SAAU,CACxD,SAAY,OAAO,OAAS,WAAc,KAAO,SACjD,KAAQ,OAAO,OAAS,WAAc,MAAQ,KAE9C,GAAG,MAAM,QAAS,CAAC,IAAK,QAAU,CAChC,GAAI,CAAC,KAAO,MAAM,eAAe,EAAG,CAClC,QAAQ,IAAI,CACV,GAAG,KAAK,OAAO,EACf,GAAG,KAAK,OAAO,CACjB,CAAC,EAAE,KAAK,CAAC,CAAC,QAAS,OAAO,IAAM,CAC9B,GAAI,aAAa,QAAS,OAAO,EAAG,OAAO,SAAS,IAAI,EACxD,eAAe,QAAS,QAAS,KAAM,QAAQ,CACjD,CAAC,CACH,MAAO,eAAe,QAAS,QAAS,KAAM,QAAQ,CACxD,CAAC,CACH,CAfS,sCAiBT,SAAS,eAAgB,QAAS,QAAS,KAAM,SAAU,CACzD,aAAa,QAAS,QAAS,CAAC,IAAK,WAAa,CAChD,GAAI,IAAK,OAAO,SAAS,GAAG,EAC5B,QAAU,SAAS,MACnB,YAAY,SAAS,MAAO,KAAM,CAACA,KAAKC,QAAS,CAC/C,GAAID,KAAK,OAAO,SAASA,IAAG,EAC5B,MAAM,IAAM,KAAK,QAAQ,OAAO,EAChC,WAAW,IAAK,CAACA,KAAK,YAAc,CAClC,GAAIA,KAAK,OAAO,SAASA,IAAG,EAC5B,GAAI,UAAW,OAAO,GAAG,QAAQ,QAAS,QAASC,MAAM,QAAQ,EACjE,OAAO,IAAKD,MAAO,CACjB,GAAIA,KAAK,OAAO,SAASA,IAAG,EAC5B,GAAG,QAAQ,QAAS,QAASC,MAAM,QAAQ,CAC7C,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAjBS,wCAmBT,SAAS,kBAAmB,QAAS,QAAS,KAAM,CAClD,IAAI,MACJ,GAAI,CACF,MAAQ,GAAG,UAAU,OAAO,CAC9B,MAAE,CAAO,CACT,GAAI,OAAS,MAAM,eAAe,EAAG,CACnC,MAAM,QAAU,GAAG,SAAS,OAAO,EACnC,MAAM,QAAU,GAAG,SAAS,OAAO,EACnC,GAAI,aAAa,QAAS,OAAO,EAAG,MACtC,CAEA,MAAM,SAAW,iBAAiB,QAAS,OAAO,EAClD,QAAU,SAAS,MACnB,KAAO,gBAAgB,SAAS,MAAO,IAAI,EAC3C,MAAM,IAAM,KAAK,QAAQ,OAAO,EAChC,MAAM,OAAS,GAAG,WAAW,GAAG,EAChC,GAAI,OAAQ,OAAO,GAAG,YAAY,QAAS,QAAS,IAAI,EACxD,WAAW,GAAG,EACd,OAAO,GAAG,YAAY,QAAS,QAAS,IAAI,CAC9C,CAnBS,8CAqBT,OAAO,QAAU,CACf,cAAe,EAAE,aAAa,EAC9B,iBACF","names":["err","type"],"sources":["/root/porla/front-end-mergeVersion/fantastic-admin.v2.11.0/node_modules/.pnpm/fs-extra@11.1.1/node_modules/fs-extra/lib/ensure/symlink.js"],"sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('../fs')\nconst _mkdirs = require('../mkdirs')\nconst mkdirs = _mkdirs.mkdirs\nconst mkdirsSync = _mkdirs.mkdirsSync\n\nconst _symlinkPaths = require('./symlink-paths')\nconst symlinkPaths = _symlinkPaths.symlinkPaths\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nconst _symlinkType = require('./symlink-type')\nconst symlinkType = _symlinkType.symlinkType\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nconst pathExists = require('../path-exists').pathExists\n\nconst { areIdentical } = require('../util/stat')\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([\n        fs.stat(srcpath),\n        fs.stat(dstpath)\n      ]).then(([srcStat, dstStat]) => {\n        if (areIdentical(srcStat, dstStat)) return callback(null)\n        _createSymlink(srcpath, dstpath, type, callback)\n      })\n    } else _createSymlink(srcpath, dstpath, type, callback)\n  })\n}\n\nfunction _createSymlink (srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err)\n    srcpath = relative.toDst\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err)\n      const dir = path.dirname(dstpath)\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err)\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n        mkdirs(dir, err => {\n          if (err) return callback(err)\n          fs.symlink(srcpath, dstpath, type, callback)\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n"]}}