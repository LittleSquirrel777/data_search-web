{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const path=require(\"path\");const fs=require(\"graceful-fs\");const pathExists=require(\"../path-exists\").pathExists;function symlinkPaths(srcpath,dstpath,callback){if(path.isAbsolute(srcpath)){return fs.lstat(srcpath,err=>{if(err){err.message=err.message.replace(\"lstat\",\"ensureSymlink\");return callback(err)}return callback(null,{toCwd:srcpath,toDst:srcpath})})}else{const dstdir=path.dirname(dstpath);const relativeToDst=path.join(dstdir,srcpath);return pathExists(relativeToDst,(err,exists)=>{if(err)return callback(err);if(exists){return callback(null,{toCwd:relativeToDst,toDst:srcpath})}else{return fs.lstat(srcpath,err2=>{if(err2){err2.message=err2.message.replace(\"lstat\",\"ensureSymlink\");return callback(err2)}return callback(null,{toCwd:srcpath,toDst:path.relative(dstdir,srcpath)})})}})}}__name(symlinkPaths,\"symlinkPaths\");function symlinkPathsSync(srcpath,dstpath){let exists;if(path.isAbsolute(srcpath)){exists=fs.existsSync(srcpath);if(!exists)throw new Error(\"absolute srcpath does not exist\");return{toCwd:srcpath,toDst:srcpath}}else{const dstdir=path.dirname(dstpath);const relativeToDst=path.join(dstdir,srcpath);exists=fs.existsSync(relativeToDst);if(exists){return{toCwd:relativeToDst,toDst:srcpath}}else{exists=fs.existsSync(srcpath);if(!exists)throw new Error(\"relative srcpath does not exist\");return{toCwd:srcpath,toDst:path.relative(dstdir,srcpath)}}}}__name(symlinkPathsSync,\"symlinkPathsSync\");module.exports={symlinkPaths,symlinkPathsSync};\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,KAAO,QAAQ,MAAM,EAC3B,MAAM,GAAK,QAAQ,aAAa,EAChC,MAAM,WAAa,QAAQ,gBAAgB,EAAE,WAwB7C,SAAS,aAAc,QAAS,QAAS,SAAU,CACjD,GAAI,KAAK,WAAW,OAAO,EAAG,CAC5B,OAAO,GAAG,MAAM,QAAU,KAAQ,CAChC,GAAI,IAAK,CACP,IAAI,QAAU,IAAI,QAAQ,QAAQ,QAAS,eAAe,EAC1D,OAAO,SAAS,GAAG,CACrB,CACA,OAAO,SAAS,KAAM,CACpB,MAAO,QACP,MAAO,OACT,CAAC,CACH,CAAC,CACH,KAAO,CACL,MAAM,OAAS,KAAK,QAAQ,OAAO,EACnC,MAAM,cAAgB,KAAK,KAAK,OAAQ,OAAO,EAC/C,OAAO,WAAW,cAAe,CAAC,IAAK,SAAW,CAChD,GAAI,IAAK,OAAO,SAAS,GAAG,EAC5B,GAAI,OAAQ,CACV,OAAO,SAAS,KAAM,CACpB,MAAO,cACP,MAAO,OACT,CAAC,CACH,KAAO,CACL,OAAO,GAAG,MAAM,QAAUA,MAAQ,CAChC,GAAIA,KAAK,CACPA,KAAI,QAAUA,KAAI,QAAQ,QAAQ,QAAS,eAAe,EAC1D,OAAO,SAASA,IAAG,CACrB,CACA,OAAO,SAAS,KAAM,CACpB,MAAO,QACP,MAAO,KAAK,SAAS,OAAQ,OAAO,CACtC,CAAC,CACH,CAAC,CACH,CACF,CAAC,CACH,CACF,CApCS,oCAsCT,SAAS,iBAAkB,QAAS,QAAS,CAC3C,IAAI,OACJ,GAAI,KAAK,WAAW,OAAO,EAAG,CAC5B,OAAS,GAAG,WAAW,OAAO,EAC9B,GAAI,CAAC,OAAQ,MAAM,IAAI,MAAM,iCAAiC,EAC9D,MAAO,CACL,MAAO,QACP,MAAO,OACT,CACF,KAAO,CACL,MAAM,OAAS,KAAK,QAAQ,OAAO,EACnC,MAAM,cAAgB,KAAK,KAAK,OAAQ,OAAO,EAC/C,OAAS,GAAG,WAAW,aAAa,EACpC,GAAI,OAAQ,CACV,MAAO,CACL,MAAO,cACP,MAAO,OACT,CACF,KAAO,CACL,OAAS,GAAG,WAAW,OAAO,EAC9B,GAAI,CAAC,OAAQ,MAAM,IAAI,MAAM,iCAAiC,EAC9D,MAAO,CACL,MAAO,QACP,MAAO,KAAK,SAAS,OAAQ,OAAO,CACtC,CACF,CACF,CACF,CA3BS,4CA6BT,OAAO,QAAU,CACf,aACA,gBACF","names":["err"],"sources":["/root/porla/data_system-web/node_modules/.pnpm/fs-extra@11.1.1/node_modules/fs-extra/lib/ensure/symlink-paths.js"],"sourcesContent":["'use strict'\n\nconst path = require('path')\nconst fs = require('graceful-fs')\nconst pathExists = require('../path-exists').pathExists\n\n/**\n * Function that returns two types of paths, one relative to symlink, and one\n * relative to the current working directory. Checks if path is absolute or\n * relative. If the path is relative, this function checks if the path is\n * relative to symlink or relative to current working directory. This is an\n * initiative to find a smarter `srcpath` to supply when building symlinks.\n * This allows you to determine which path to use out of one of three possible\n * types of source paths. The first is an absolute path. This is detected by\n * `path.isAbsolute()`. When an absolute path is provided, it is checked to\n * see if it exists. If it does it's used, if not an error is returned\n * (callback)/ thrown (sync). The other two options for `srcpath` are a\n * relative url. By default Node's `fs.symlink` works by creating a symlink\n * using `dstpath` and expects the `srcpath` to be relative to the newly\n * created symlink. If you provide a `srcpath` that does not exist on the file\n * system it results in a broken symlink. To minimize this, the function\n * checks to see if the 'relative to symlink' source file exists, and if it\n * does it will use it. If it does not, it checks if there's a file that\n * exists that is relative to the current working directory, if does its used.\n * This preserves the expectations of the original fs.symlink spec and adds\n * the ability to pass in `relative to current working direcotry` paths.\n */\n\nfunction symlinkPaths (srcpath, dstpath, callback) {\n  if (path.isAbsolute(srcpath)) {\n    return fs.lstat(srcpath, (err) => {\n      if (err) {\n        err.message = err.message.replace('lstat', 'ensureSymlink')\n        return callback(err)\n      }\n      return callback(null, {\n        toCwd: srcpath,\n        toDst: srcpath\n      })\n    })\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    return pathExists(relativeToDst, (err, exists) => {\n      if (err) return callback(err)\n      if (exists) {\n        return callback(null, {\n          toCwd: relativeToDst,\n          toDst: srcpath\n        })\n      } else {\n        return fs.lstat(srcpath, (err) => {\n          if (err) {\n            err.message = err.message.replace('lstat', 'ensureSymlink')\n            return callback(err)\n          }\n          return callback(null, {\n            toCwd: srcpath,\n            toDst: path.relative(dstdir, srcpath)\n          })\n        })\n      }\n    })\n  }\n}\n\nfunction symlinkPathsSync (srcpath, dstpath) {\n  let exists\n  if (path.isAbsolute(srcpath)) {\n    exists = fs.existsSync(srcpath)\n    if (!exists) throw new Error('absolute srcpath does not exist')\n    return {\n      toCwd: srcpath,\n      toDst: srcpath\n    }\n  } else {\n    const dstdir = path.dirname(dstpath)\n    const relativeToDst = path.join(dstdir, srcpath)\n    exists = fs.existsSync(relativeToDst)\n    if (exists) {\n      return {\n        toCwd: relativeToDst,\n        toDst: srcpath\n      }\n    } else {\n      exists = fs.existsSync(srcpath)\n      if (!exists) throw new Error('relative srcpath does not exist')\n      return {\n        toCwd: srcpath,\n        toDst: path.relative(dstdir, srcpath)\n      }\n    }\n  }\n}\n\nmodule.exports = {\n  symlinkPaths,\n  symlinkPathsSync\n}\n"]}}