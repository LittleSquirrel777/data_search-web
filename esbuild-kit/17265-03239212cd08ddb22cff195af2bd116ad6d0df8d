{"code":"(()=>{\n\"use strict\";var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,\"name\",{value,configurable:true});const fs=require(\"graceful-fs\");const path=require(\"path\");const copy=require(\"../copy\").copy;const remove=require(\"../remove\").remove;const mkdirp=require(\"../mkdirs\").mkdirp;const pathExists=require(\"../path-exists\").pathExists;const stat=require(\"../util/stat\");function move(src,dest,opts,cb){if(typeof opts===\"function\"){cb=opts;opts={}}opts=opts||{};const overwrite=opts.overwrite||opts.clobber||false;stat.checkPaths(src,dest,\"move\",opts,(err,stats)=>{if(err)return cb(err);const{srcStat,isChangingCase=false}=stats;stat.checkParentPaths(src,srcStat,dest,\"move\",err2=>{if(err2)return cb(err2);if(isParentRoot(dest))return doRename(src,dest,overwrite,isChangingCase,cb);mkdirp(path.dirname(dest),err3=>{if(err3)return cb(err3);return doRename(src,dest,overwrite,isChangingCase,cb)})})})}__name(move,\"move\");function isParentRoot(dest){const parent=path.dirname(dest);const parsedPath=path.parse(parent);return parsedPath.root===parent}__name(isParentRoot,\"isParentRoot\");function doRename(src,dest,overwrite,isChangingCase,cb){if(isChangingCase)return rename(src,dest,overwrite,cb);if(overwrite){return remove(dest,err=>{if(err)return cb(err);return rename(src,dest,overwrite,cb)})}pathExists(dest,(err,destExists)=>{if(err)return cb(err);if(destExists)return cb(new Error(\"dest already exists.\"));return rename(src,dest,overwrite,cb)})}__name(doRename,\"doRename\");function rename(src,dest,overwrite,cb){fs.rename(src,dest,err=>{if(!err)return cb();if(err.code!==\"EXDEV\")return cb(err);return moveAcrossDevice(src,dest,overwrite,cb)})}__name(rename,\"rename\");function moveAcrossDevice(src,dest,overwrite,cb){const opts={overwrite,errorOnExist:true,preserveTimestamps:true};copy(src,dest,opts,err=>{if(err)return cb(err);return remove(src,cb)})}__name(moveAcrossDevice,\"moveAcrossDevice\");module.exports=move;\n})()\n","warnings":[],"map":{"version":3,"mappings":";+HAEA,MAAM,GAAK,QAAQ,aAAa,EAChC,MAAM,KAAO,QAAQ,MAAM,EAC3B,MAAM,KAAO,QAAQ,SAAS,EAAE,KAChC,MAAM,OAAS,QAAQ,WAAW,EAAE,OACpC,MAAM,OAAS,QAAQ,WAAW,EAAE,OACpC,MAAM,WAAa,QAAQ,gBAAgB,EAAE,WAC7C,MAAM,KAAO,QAAQ,cAAc,EAEnC,SAAS,KAAM,IAAK,KAAM,KAAM,GAAI,CAClC,GAAI,OAAO,OAAS,WAAY,CAC9B,GAAK,KACL,KAAO,CAAC,CACV,CAEA,KAAO,MAAQ,CAAC,EAEhB,MAAM,UAAY,KAAK,WAAa,KAAK,SAAW,MAEpD,KAAK,WAAW,IAAK,KAAM,OAAQ,KAAM,CAAC,IAAK,QAAU,CACvD,GAAI,IAAK,OAAO,GAAG,GAAG,EACtB,KAAM,CAAE,QAAS,eAAiB,KAAM,EAAI,MAC5C,KAAK,iBAAiB,IAAK,QAAS,KAAM,OAAQA,MAAO,CACvD,GAAIA,KAAK,OAAO,GAAGA,IAAG,EACtB,GAAI,aAAa,IAAI,EAAG,OAAO,SAAS,IAAK,KAAM,UAAW,eAAgB,EAAE,EAChF,OAAO,KAAK,QAAQ,IAAI,EAAGA,MAAO,CAChC,GAAIA,KAAK,OAAO,GAAGA,IAAG,EACtB,OAAO,SAAS,IAAK,KAAM,UAAW,eAAgB,EAAE,CAC1D,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAtBS,oBAwBT,SAAS,aAAc,KAAM,CAC3B,MAAM,OAAS,KAAK,QAAQ,IAAI,EAChC,MAAM,WAAa,KAAK,MAAM,MAAM,EACpC,OAAO,WAAW,OAAS,MAC7B,CAJS,oCAMT,SAAS,SAAU,IAAK,KAAM,UAAW,eAAgB,GAAI,CAC3D,GAAI,eAAgB,OAAO,OAAO,IAAK,KAAM,UAAW,EAAE,EAC1D,GAAI,UAAW,CACb,OAAO,OAAO,KAAM,KAAO,CACzB,GAAI,IAAK,OAAO,GAAG,GAAG,EACtB,OAAO,OAAO,IAAK,KAAM,UAAW,EAAE,CACxC,CAAC,CACH,CACA,WAAW,KAAM,CAAC,IAAK,aAAe,CACpC,GAAI,IAAK,OAAO,GAAG,GAAG,EACtB,GAAI,WAAY,OAAO,GAAG,IAAI,MAAM,sBAAsB,CAAC,EAC3D,OAAO,OAAO,IAAK,KAAM,UAAW,EAAE,CACxC,CAAC,CACH,CAbS,4BAeT,SAAS,OAAQ,IAAK,KAAM,UAAW,GAAI,CACzC,GAAG,OAAO,IAAK,KAAM,KAAO,CAC1B,GAAI,CAAC,IAAK,OAAO,GAAG,EACpB,GAAI,IAAI,OAAS,QAAS,OAAO,GAAG,GAAG,EACvC,OAAO,iBAAiB,IAAK,KAAM,UAAW,EAAE,CAClD,CAAC,CACH,CANS,wBAQT,SAAS,iBAAkB,IAAK,KAAM,UAAW,GAAI,CACnD,MAAM,KAAO,CACX,UACA,aAAc,KACd,mBAAoB,IACtB,EACA,KAAK,IAAK,KAAM,KAAM,KAAO,CAC3B,GAAI,IAAK,OAAO,GAAG,GAAG,EACtB,OAAO,OAAO,IAAK,EAAE,CACvB,CAAC,CACH,CAVS,4CAYT,OAAO,QAAU","names":["err"],"sources":["/root/porla/front-end-mergeVersion/fantastic-admin.v2.11.0/node_modules/.pnpm/fs-extra@11.1.1/node_modules/fs-extra/lib/move/move.js"],"sourcesContent":["'use strict'\n\nconst fs = require('graceful-fs')\nconst path = require('path')\nconst copy = require('../copy').copy\nconst remove = require('../remove').remove\nconst mkdirp = require('../mkdirs').mkdirp\nconst pathExists = require('../path-exists').pathExists\nconst stat = require('../util/stat')\n\nfunction move (src, dest, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  const overwrite = opts.overwrite || opts.clobber || false\n\n  stat.checkPaths(src, dest, 'move', opts, (err, stats) => {\n    if (err) return cb(err)\n    const { srcStat, isChangingCase = false } = stats\n    stat.checkParentPaths(src, srcStat, dest, 'move', err => {\n      if (err) return cb(err)\n      if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb)\n      mkdirp(path.dirname(dest), err => {\n        if (err) return cb(err)\n        return doRename(src, dest, overwrite, isChangingCase, cb)\n      })\n    })\n  })\n}\n\nfunction isParentRoot (dest) {\n  const parent = path.dirname(dest)\n  const parsedPath = path.parse(parent)\n  return parsedPath.root === parent\n}\n\nfunction doRename (src, dest, overwrite, isChangingCase, cb) {\n  if (isChangingCase) return rename(src, dest, overwrite, cb)\n  if (overwrite) {\n    return remove(dest, err => {\n      if (err) return cb(err)\n      return rename(src, dest, overwrite, cb)\n    })\n  }\n  pathExists(dest, (err, destExists) => {\n    if (err) return cb(err)\n    if (destExists) return cb(new Error('dest already exists.'))\n    return rename(src, dest, overwrite, cb)\n  })\n}\n\nfunction rename (src, dest, overwrite, cb) {\n  fs.rename(src, dest, err => {\n    if (!err) return cb()\n    if (err.code !== 'EXDEV') return cb(err)\n    return moveAcrossDevice(src, dest, overwrite, cb)\n  })\n}\n\nfunction moveAcrossDevice (src, dest, overwrite, cb) {\n  const opts = {\n    overwrite,\n    errorOnExist: true,\n    preserveTimestamps: true\n  }\n  copy(src, dest, opts, err => {\n    if (err) return cb(err)\n    return remove(src, cb)\n  })\n}\n\nmodule.exports = move\n"]}}